apiVersion: v1
kind: Namespace
metadata:
  name: database
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init
  namespace: database
data:
  init.sql: |
    CREATE EXTENSION IF NOT EXISTS citus;
    CREATE DATABASE vault5;
    CREATE USER vault5_user WITH PASSWORD 'vault5_pass';
    GRANT ALL PRIVILEGES ON DATABASE vault5 TO vault5_user;
    -- Additional schemas for microservices
    \c vault5;
    CREATE SCHEMA IF NOT EXISTS auth;
    CREATE SCHEMA IF NOT EXISTS accounts;
    CREATE SCHEMA IF NOT EXISTS transactions;
    CREATE SCHEMA IF NOT EXISTS investments;
    CREATE SCHEMA IF NOT EXISTS loans;
    CREATE SCHEMA IF NOT EXISTS lending;
    GRANT ALL ON SCHEMA auth TO vault5_user;
    GRANT ALL ON SCHEMA accounts TO vault5_user;
    GRANT ALL ON SCHEMA transactions TO vault5_user;
    GRANT ALL ON SCHEMA investments TO vault5_user;
    GRANT ALL ON SCHEMA loans TO vault5_user;
    GRANT ALL ON SCHEMA lending TO vault5_user;
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: database
type: Opaque
data:
  password: dmF1bHQ1X3Bhc3M=  # base64 'vault5_pass'
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-coordinator
  namespace: database
spec:
  serviceName: postgres-coordinator
  replicas: 1
  selector:
    matchLabels:
      app: postgres-coordinator
  template:
    metadata:
      labels:
        app: postgres-coordinator
    spec:
      containers:
      - name: postgres
        image: citusdata/citus:latest
        env:
        - name: POSTGRES_DB
          value: vault5
        - name: POSTGRES_USER
          value: vault5_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: CITUS_WORKER_COUNT
          value: "2"
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - vault5_user
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - vault5_user
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: init-scripts
        configMap:
          name: postgres-init
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-worker
  namespace: database
spec:
  serviceName: postgres-worker
  replicas: 2
  selector:
    matchLabels:
      app: postgres-worker
  template:
    metadata:
      labels:
        app: postgres-worker
    spec:
      containers:
      - name: postgres
        image: citusdata/citus:latest
        env:
        - name: POSTGRES_DB
          value: vault5
        - name: POSTGRES_USER
          value: vault5_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - vault5_user
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - vault5_user
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-coordinator
  namespace: database
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: postgres-coordinator
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-worker
  namespace: database
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: postgres-worker
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgbouncer
  namespace: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgbouncer
  template:
    metadata:
      labels:
        app: pgbouncer
    spec:
      containers:
      - name: pgbouncer
        image: brainsam/pgbouncer:latest
        env:
        - name: DB_HOST
          value: postgres-coordinator
        - name: DB_PORT
          value: "5432"
        - name: DB_USER
          value: vault5_user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: POOL_MODE
          value: transaction
        - name: MAX_CLIENT_CONN
          value: "100"
        - name: DEFAULT_POOL_SIZE
          value: "20"
        ports:
        - containerPort: 6432
          name: pgbouncer
        livenessProbe:
          tcpSocket:
            port: 6432
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6432
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: pgbouncer
  namespace: database
spec:
  ports:
  - port: 6432
    targetPort: 6432
  selector:
    app: pgbouncer