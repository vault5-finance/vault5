version: '3.8'

services:
  user-service:
    build: .
    container_name: vault5-user-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - POSTGRES_URI=postgresql://user_service:password@postgres:5432/user_service_db
      - REDIS_URI=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=info
      - PROMETHEUS_METRICS_ENABLED=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - vault5-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: vault5-postgres
    environment:
      - POSTGRES_DB=user_service_db
      - POSTGRES_USER=user_service
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - vault5-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_service -d user_service_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: vault5-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vault5-network
    restart: unless-stopped
    command: redis-server --appendonly yes

volumes:
  postgres_data:
  redis_data:

networks:
  vault5-network:
    driver: bridge
    name: vault5-network